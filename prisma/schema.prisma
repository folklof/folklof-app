// Updated Prisma schema file

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DB_URL")
}

// User model
model User {
  ID          String    @id @default(uuid())
  role_id     Int
  username    String?
  email       String?
  phone       String?
  age         Int?
  avatar      String?
  created_date DateTime?  @default(now())
  role        Role?      @relation(fields: [role_id], references: [ID])
  
  // Relations
  favourites  Favourite[]
  libraries   Library[]
  histories   HistoryQuiz[]
  reviews     Review[]
}

// Role model
model Role {
  ID       Int   @id @default(autoincrement())
  name     String?
  
  // Relations
  users    User[]
}

// Favourite model
model Favourite {
  ID           String    @id @default(uuid())
  user_id      String
  book_id      String
  book         Book?      @relation(fields: [book_id], references: [ID])
  user         User?      @relation(fields: [user_id], references: [ID])
  is_added     Boolean?   @default(false)
  created_date DateTime?  @default(now())
}

// Library model
model Library {
  ID           String    @id @default(uuid())
  user_id      String
  book_id      String
  is_read      Boolean?   @default(false)
  created_date DateTime?  @default(now())
  book         Book?      @relation(fields: [book_id], references: [ID])
  user         User?      @relation(fields: [user_id], references: [ID])
}

// Book model
model Book {
  ID           String    @id @default(uuid())
  category_id  String
  agegroup_id  String
  book_code    String?
  title        String?
  desc         String?   @db.LongText
  duration     String?
  audio_link   String?
  cover_image  String?
  created_date DateTime?  @default(now())
  category     Category?  @relation(fields: [category_id], references: [ID])
  agegroup     AgeGroup?  @relation(fields: [agegroup_id], references: [ID])
  
  // Relations
  favourites   Favourite[]
  libraries    Library[]
  bookQuizzes  BookQuiz[]
  reviews      Review[]
}

// Category model
model Category {
  ID           String   @id @default(uuid())
  name         String?
  desc         String?

  // Relations
  books        Book[]
}

// Age Group model
model AgeGroup {
  ID           String   @id @default(uuid())
  name         String?
  desc         String?

  // Relations
  books       Book[]
}

// BookQuiz model
model BookQuiz {
  ID              String    @id @default(uuid())
  book_id         String
  question        String?
  option1         String?
  option2         String?
  option3         String?
  correct_answer  String?
  book            Book?      @relation(fields: [book_id], references: [ID])
  created_date    DateTime?  @default(now())
  
  // Relations
  histories       HistoryQuiz[]
}

// HistoryQuiz model
model HistoryQuiz {
  ID            String    @id @default(uuid())
  bookquiz_id   String
  user_id       String?
  scores        Int?
  user          User?      @relation(fields: [user_id], references: [ID])
  bookquiz      BookQuiz?  @relation(fields: [bookquiz_id], references: [ID])
  created_date  DateTime?  @default(now())
}

// Review model
model Review {
  ID            String    @id @default(uuid())
  user_id       String
  book_id       String
  title         String?
  description   String?
  rating        Int?
  created_date  DateTime?
  user          User?    @relation(fields: [user_id], references: [ID])
  book          Book?    @relation(fields: [book_id], references: [ID])
}
